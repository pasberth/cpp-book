用語（Definitions）
================================================================================

実引数（argument）と、仮引数（parameter）
--------------------------------------------------------------------------------

引数には、ふたつの種類がある。実引数とは、関数やマクロ、throw文、テンプレートに、実際に渡す引数のことをいう。仮引数とは、関数宣言や関数の定義、例外ハンドラーのcatch句、マクロ、テンプレート仮引数のことをいう。たとえば、関数の場合、

.. code-block:: c++

  // xは仮引数
  void f( int x ) ;

  int main()
  {
  // 0は実引数
      f(0) ;
  // argは実引数
      int arg = 0 ;
      f( arg ) ;
  }

このように、関数の宣言や定義などの引数を、仮引数といい、関数の呼び出しの際に指定する引数を、実引数という。仮引数と実引数は、厳密に区別される。

静的な型（static type）と、動的な型（dynamic type）
--------------------------------------------------------------------------------

静的な型とは、実行しなくても、その意味が分かる型のことである。動的な型は、実行しなければ、その意味が決定出来ない型のことである。

シグネチャー（signature）
--------------------------------------------------------------------------------

シグネチャーとは、ある関数に対する、その関数の名前、引数のリストの型、戻り値の型、テンプレート仮引数のことである。また、メンバー関数の場合は、そのクラスや、CV修飾、リファレンス修飾も含まれる。また、その関数の属する名前空間も含まれる。シグネチャーは、その関数を特定するために用いられる。

ill-formedプログラムと、well-formedプログラム
--------------------------------------------------------------------------------

well-formedプログラムとは、文法上正しいプログラムである。ill-formedプログラムとは、well-formedではないプログラム、すなわち、文法上、間違ったプログラムである。多くの実装では、ill-formedプログラムは、コンパイルエラーとなる。

実装可能な機能（conditionally-supported）
--------------------------------------------------------------------------------

実装可能な機能とは、規格上、実装してなくてもよい機能や動作のことである。

実装定義の動作（implementation-defined behavior）
--------------------------------------------------------------------------------

実装定義の動作とは、well-formedではあるが、その意味が、実装によって変わるということである。

未定義の動作（undefined behavior）
--------------------------------------------------------------------------------

未定義の動作とは、そのプログラムの意味が、規格上定義されていないということである。その動作は実装によって異なり、あるいはエラーとなるかもしれないし、あるいは問題なく結果が予測できる動作となるかもしれない。一般に、エラーとなる場合が多い。未定義の動作を含むプログラムを書く場合は、そのコードの意味が、目的の実行環境で、明確に定義されているかどうかを確認するべきである。

未規定の動作（unspecified behavior）
--------------------------------------------------------------------------------

未規定の動作も、具体的な意味が、実装によって異なると言う点で、未定義の動作と変わらない。ただし、未規定の動作は、規格上、推奨される動作が決められていることも多く、多くの実装で、エラーにならない、何らかの意味のあるコードになると言う点で、未定義の動作よりは、安全である。ただし、これも、目的の実行環境での意味がどうなるのかを、正しく把握しておく必要がある。